[Web Socket]

  클라이언트와 서버 양방향, 실시간 통신을 하는 프로토콜
    통신 요청-응답 반복하는 http와 다르게 실시간 통신

    클라이언트            서버
  1.  HTTP   ->   websocket 요청     (클라이언트가 http에서 websocket으로 바꿔서 통신 요청)
  2.         <-  websocket 연결 수락
  3.  실시간 양방향 데이터 통신 시작
  4.      통신 끝나면 연결 종료
  --------------------추가 설명--------------------
  1. 요청 헤더에 Web Socket 관련 정보 담아서 보냄

  2. Web Socket 프로토콜로 전환 (http:// -> ws://)
     연결상태가 유지

  3. stomp (Simple Text Oriented Messaging Protocol): 메시지 라우팅
     을 소켓 위에 얹어서 메시지 처리

     * SPRING(Back)
     @MessageMapping("/chat.send") // 클라이언트로부터 들어오는 메시지 처리
     @SendTo("/topic/public") // 구독중인 모든 클라이언트에게 메시지 전달 메서드

     * REACT(Front)
     stompClient.current.send() // 메시지 전송
     stompClient.current.subscribe("구독 주소", message) // 구독

     websocket 연결 요청 주소: /ws-chat
     클라이언트가 구독할 주소 prefix: "/topic"
     클라이언트가 서버로 보낼 메시지 주소 prefix: "/app"
     /app/chat.send -> prefix: -> /app을 제외하고 나머지 경로에 맞는 @MessageMapping("/chat.send") 동작