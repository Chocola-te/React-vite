[이벤트 처리]

  1. 이벤트 핸들러: 카멜 표기법(두번째 단어부터 첫글자 대문자)

  2. 함수 지정
    - onClick = {함수명} // 함수 매개변수가 없을 때
    - onClick = {function() {onClickButton2('김솔데')}} // 매개변수가 있을 때
    - onClick = {() => onClickButton2('김솔데')} // 위와 같음

      매개변수가 있을 때 onClick 이베트 발생 시 바로 함수를 전달하게 되면 렌더링과 동시에 함수가 실행된다.
      때문에 function으로 한번 더 들어가 매개변수를 전달해야한다.

      onClick={}에는 "함수 실행 결과"가 아니라 "함수 정의 자체"를 넣어야 한다.
      → 매개변수가 있다면 () => 함수(매개변수)처럼 래핑 필요
  
    - 이벤트 객체: SyntheticEvent라는 이벤트 객체 전달
                 e.target: 이벤트가 발생한 요소

    - submit 이벤트 발생 시
      const onSubmitForm = (e) => {
        e.preventDefault(); // form에서 submit 막기
      }
      onSubmit = {onSubmitForm}

[state(상태)]

  : 컴포넌트를 동적으로 만드는 값
  : 동적인 데이터를 저장하고 관리하는 변수
  : 값이 바뀌면 자동으로 ※리렌더링※

  const[변수, set변수명] = useState(초기값)
    변수: 상태값
    set변수명: 변수에 저장된 값을 변경 -> 현재 컴포넌트 리렌더링

  - 리렌더링이 되는 경우
    1) state 변화
    2) props 변화
    3) 부모 컴포넌트의 변화

[Hook]

  : 함수형 컴포넌트에서 상태(state) 또는 lifecycle을 사용할 수 있게 해주는 함수

  대표적인 Hook
    useState: 컴포넌트 상태를 선언할 때 사용
    useEffect: 부수 효과(side effect)를 처리할 때 사용(렌더링 이후 코드 실행 등)
               컴포넌트가 렌더링될 때마다 특정 작업(사이드 이펙트)을 실행
    useRef DOM: 접근 또는 값 저장용 변수로 사용
                리렌더링 없이 값 유지가 필요한 변수

  Hook 사용 규칙
    - 최상위에서만 호출
    - 조건문, 반복문, 함수 내부에서 호출하면 안됨.
    - 항상 컴포넌트의 최상단에서 사용해야 함.
    - React 함수형 컴포넌트 혹은 Custom Hook에서만 호출 가능
    - 일반 함수나 클래스에서는 사용 불가.

  반복 함수 - 배열의 요소를 하나씩 꺼내서 콜백 함수 수행 후 리턴값이 true인 경우 해당 요소만 남겨 새로운 배열 생성
    배열.filter((요소, 인덱스, 배열) -> {조건식(true/false)})
                // JS의 장점 - 매개변수의 개수가 맞지 않아도 선언이 가능하다.

    let oarray = [1, 2, 3, 4];
    let narray = oarray.filter((element, i) => {e % 2 == 0});
                // 요소와 인덱스만 가지고도 조건식 수행
    1. (element(1), index(0)) => {1 % 2 == 0} false -> narray[] 버려짐
    2. (element(2), index(1)) => {2 % 2 == 0} true -> narray[2] 저장
    3. (element(3), index(2)) => {3 % 2 == 0} false -> narray[2] 버려짐
    4. (element(4), index(3)) => {4 % 2 == 0} true -> narray[2, 4] 저장

const 변수 선언: 선언된 변수의 이름은 같은 블록 내에서 재활용 불가
                변수에 저장된 내부 값은 변경 가능(객체, 배열 등)
                (참조는 유지하되 객체/배열 내부를 조작하고 싶을 때)